import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;


public class FourthRatings {
	
	private double dotProduct(Rater me, Rater r){
		double result = 0;
		for(String rated : me.getItemsRated()){
			if(r.hasRating(rated)){
				double meCurRating = (double)me.getRating(rated) - 5;
				double rCurRating = (double)r.getRating(rated) -5;
				result += meCurRating * rCurRating;
			}
		}
		return result;
	}

	private ArrayList<Rating> getSimilarities(String id){
		ArrayList<Rating> result = new ArrayList<Rating>();
		for(Rater r : RaterDatabase.getRaters()){
			if(!r.getID().equals(id)){
				if(dotProduct(RaterDatabase.getRater(id),r) > 0 ){
					Rating cur = new Rating(r.getID(), dotProduct(RaterDatabase.getRater(id),r));
					result.add(cur);
				}
			}
		}
		//sort 
		//based on the implementation of compareTo
		Collections.reverse(result);
		return result;
	}
	//of movies and their weighted average ratings using 
	//only the top numSimilarRaters with positive ratings
	//and including only those movies that have at least 
	//minimalRaters ratings from those most similar raters
	//(not just minimalRaters ratings overall).
	public ArrayList<Rating> getSimilarRatings (String id, int numSimilarRaters, int  minimalRaters){
		ArrayList<Rating> result = new ArrayList<Rating> ();
		//use closeness weight
		HashMap<String,Integer> hm = new HashMap<String,Integer>();
		//useful..
		ArrayList<Rating> raters = getSimilarities(id);
		
		
		//STEP 1 : record all the movies that are rated by those similarRaters and the number of rating among them
		for(int i = 0; i <  numSimilarRaters ; i ++){
			//rating has rater's id and the similarity as value
			Rating curRating = raters.get(i);
			String curRater = curRating.getItem();
			for(String movie: RaterDatabase.getRater(curRater).getItemsRated()){
				if(hm.containsKey(movie)){
					hm.put(movie, hm.get(movie) + 1);
				}else{
					hm.put(movie,1);
				}
			}
		}
		
		//STEP 2 : filter the movies with minimal rating among those similarRaters
		//STEP 3(concurrent) : calculate the weighted average and append the ArrayList, getting ready for return
		for(String movieID : hm.keySet()){
			if(hm.get(movieID) >= minimalRaters){
				double curWeightedRating = 0;
				int count = 0 ; 
				for(int i = 0; i < numSimilarRaters ; i ++){
					int closeness = numSimilarRaters - i;
					Rater cur = RaterDatabase.getRater(raters.get(i).getItem());
					if(cur.hasRating(movieID)){
						count += 1;
						curWeightedRating += closeness * cur.getRating(movieID);
					}
				}
				//curWeightedRating finishes calculating
				Rating movieIdRating = new Rating(movieID, curWeightedRating);
				result.add(movieIdRating);
			}
		}
		

		return result;
	}
	
	
	private double getAverageByID(String id, int minimalRaters){
		ArrayList<Rater> raters = RaterDatabase.getRaters();
		double count = 0;
		double tRate = 0;
		for(Rater r : raters){
			if(r.hasRating(id)){
				count += 1;
				tRate += r.getRating(id);
			}
		}
		
		if(count >= minimalRaters){
			return (double)(tRate/count);
		}
		
		return (double)0.0;
	}	
	
	
	
	public ArrayList<Rating> getAverageRatings(int minimalRaters){
		ArrayList<Rating> result = new ArrayList<Rating>();
		ArrayList<String> movies = MovieDatabase.filterBy(new TrueFilter());
		for(String id : movies){
			if(getAverageByID(id, minimalRaters) > 0){
				Rating rating = new Rating(id,getAverageByID(id, minimalRaters));
				result.add(rating);
			}
		}
		return result;
	}
	
	public ArrayList<Rating>  getAverageRatingsByFilter(int minimalRaters, Filter filterCriteria){
		ArrayList<Rating> result = new ArrayList<Rating>();
		ArrayList<String> movies = MovieDatabase.filterBy(filterCriteria);
		for(String m : movies){
			if(getAverageByID(m,minimalRaters) > 0){
				Rating rating = new Rating(m,getAverageByID(m,minimalRaters));
				result.add(rating);
			}
		}
		return result;	
	}
}
