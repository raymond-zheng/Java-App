import java.util.ArrayList;
import java.util.HashMap;
import java.util.Random;

public class EfficientMarkovModel extends AbstractMarkovModel{

	private int N;
	private HashMap <String,ArrayList<String>> hm;
	
	public EfficientMarkovModel(int n) {
		myRandom = new Random();
		N = n;
		hm = new HashMap<String,ArrayList<String>>();
	}
	
	public void setTraining(String s) {
	    myText = s.trim();
	    //should call buildMap here
	    buildMap()''
	}
	
	
	public void buildMap(){
		for(int i = 0; i < myText.length() - N; i++){
			String key = myText.substring(i, i+N);
			if(hm.containsKey(key)){
				//appending the character after it
				String follow = myText.substring(i+N,i+N+1);
				//adding to the ArrayList if not there
				if(!hm.get(key).contains(follow)){
					hm.get(key).add(follow);
				}
			}else{
				ArrayList<String> follows = new ArrayList<String>();
				follows.add(myText.substring(i+N,i+N+1));
				hm.put(key, follows);
			}
		}
	}
	

	
	public String getRandomText(int numChars){
		if (myText == null){
			return "";
		}
		StringBuilder sb = new StringBuilder();
		int idx = myRandom.nextInt(myText.length() - N);
		String key = myText.substring(idx, idx + N);
		
		//every time a *new* key is generated, should check and call buildMap once
		if(!hm.containsKey(key)){
			buildMap(key);
		}
		
		sb.append(key);
		
		
		
		//already append N characters before the for loop
		for(int  i = 0 ; i < numChars - N  ; i ++){
			ArrayList<String> follows = getFollows(key);
			
			//if follows is empty, continue to the next key
			if(follows.size() == 0){
				break;
			}
			
			idx = myRandom.nextInt(follows.size());
			String temp = follows.get(idx);
			sb.append(temp);
			
			//WRONG: key = sb.substring(i-3,i+1);
			//CORRECT: 
			key = key.substring(1) + temp;
			
			if(!hm.containsKey(key)){
				buildMap(key);
			}
		}
		
		return sb.toString();
	
	}

	
	public String toString(){
		return "Efficient MarkovModel of order " + N;
	}
	
	
	//TEES methods 
	public void  printHashMapInfo(){
		
		
	}
	

}
