import java.util.*;
import edu.duke.*;

public class CharactersInPlay {
	private ArrayList<String> people;
	private ArrayList<Integer> count;
	
	public CharactersInPlay(){
		people = new ArrayList<String>();
		count = new ArrayList<Integer>();
	}
	
	public void update(String person){ 
		int idx = people.indexOf(person);
		if(idx == -1){ //first time recording
			people.add(person); 
			count.add(1); //should matches the index of people
		}else{
			count.set(people.indexOf(person), count.get(people.indexOf(person)) + 1);
		}
	}
	
	public void findAllCharacters(){
		people.clear(); //refresh
		count.clear(); //refresh
		FileResource fr = new FileResource();
		for(String line:fr.lines()){
			int idx = line.indexOf(",");
			String temp = line.substring(0,idx); //excluding ,
			update(temp);
		}
	}
	
	public void tester(){
		//only print main character ( estimate it by yourself) 
		System.out.print("Testing findAllCharacters ");
		findAllCharacters();
		System.out.println("The main characters are: ");
		for(int i = 0 ; i < people.size(); i ++){
			if(count.indexOf(i) >= 3){ //main character
				System.out.println(people.indexOf(i) + "\t" + count.indexOf(i));
			}
		}
		System.out.println("Testing charactersWithNumParts ");
		charactersWithNumParts(4,5);
	}
	
	
	/* This method should print out the names of all those characters 
	 * that have exactly number speaking parts, where number is greater than 
	 * or equal to num1 and less than or equal to num2 */
	//contract: num1 <= num2
	public void charactersWithNumParts(int num1, int num2){
		for(int i = 0 ; i< people.size(); i ++){
			if( num1 <= count.indexOf(i)  && count.indexOf(i) <= num2 ){
				System.out.println(people.indexOf(i) + "\t" + count.indexOf(i));
			}
		}
	}
	
	
}
