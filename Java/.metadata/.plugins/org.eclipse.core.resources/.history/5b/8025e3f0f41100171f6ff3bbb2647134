import java.util.*;
import edu.duke.*;

public class VigenereBreaker {
	
	private int keyLengthGlobal = -1;
	private int[] keysGlobal;
	private int validWordsGlobal;

    public String sliceString(String message, int whichSlice, int totalSlices) {
    	String temp = "";
    	for(int i = whichSlice; i < message.length(); i += totalSlices){
    		temp += message.substring(i, i+1);
    	}
    	
        return temp;
    }


    public int[] tryKeyLength(String encrypted, int klength, char mostCommon) {
        int[] key = new int[klength];
        CaesarCracker cc = new CaesarCracker(mostCommon);
        for(int i = 0; i < klength; i ++){
        	String temp = sliceString(encrypted, i, klength);
        	key[i] = cc.getKey(temp);
        }
        return key;
    }

  
    public void breakVigenere () {
    	FileResource fr = new FileResource("data/Encryption/secretmessage2.txt");
    	String s = fr.asString();

    	FileResource frDic = new FileResource("data/Encryption/English");
    	HashSet<String> commonWords = readDictionary(frDic);

    	String decrypted = breakForLanguage(s,commonWords);
    	System.out.println(decrypted);
    	System.out.println("The key length is " + keyLengthGlobal);
    	System.out.println("The keys being used are " + Arrays.toString(keysGlobal));
    	System.out.println("The number of valid words is " + validWordsGlobal);
    }
    
    public HashSet<String> readDictionary(FileResource fr){
    	HashSet<String> hs = new HashSet<String>();
    	for(String s: fr.lines()){
    		String lower = s.toLowerCase();
    		if(!hs.contains(lower)){
    			hs.add(lower);
    		}
    	}
    	return hs;
    }
    

    public int countWords(String message, HashSet<String> dictionary){
    	String[] array = message.split("\\W");
    	int c = 0;
    	for(String s: array){
    		String word = s.toLowerCase();
    		if(dictionary.contains(word)){
    			c ++;
    		}
    	}
    	return c;
    }
    
    public String breakForLanguage(String encrypted, HashSet<String> dictionary){
    	int max = -1;
    	String realDecrypted = "";
    	char mostCommonChar = mostCommonCharIn(dictionary)
    	for(int i = 1; i <= 100; i++){
    		int[] keys = tryKeyLength(encrypted, i, mostCommonChar);
    		VigenereCipher vc = new VigenereCipher(keys);
    		String decrypted = vc.decrypt(encrypted);
    		int currentCount = countWords(decrypted,dictionary);
    		if(currentCount > max){
    			max = currentCount;
    			realDecrypted = decrypted;
    		}
    	}
   	
    	return realDecrypted;
    }
    
    public char mostCommonCharIn(HashSet<String> dictionary){
    	int count[] = new int[26];
    	String alphabet = "abcdefghijklmnopqrstuvwxyz";
    	for(String s: dictionary){
    		for(char c : s.toCharArray()){
    			int idx = alphabet.indexOf(c);
    			count[idx] ++;
    		}
    	}	
    	int max = -1;
    	int maxIdx = -1;
    	for(int i =0 ; i < count.length; i ++){
    		if(count[i] > max){
    			max = count[i];
    			maxIdx = i;
    		}
    	}
    	return alphabet.charAt(maxIdx);
    }
    
    public void breakForAllLangs(String encrypted, HashMap<String, HashSet<String>> languages){
    	//readDictionary returns a hashset
    	int max = -1;
    	String actualLanguage = "";
    	String actualDecrpyted = "";
    	for(String l : languages.keySet()){
    		HashSet<String> dict = languages.get(l);
    		String curDecrypted = breakForLanguage(encrypted,dict);
    		if(countWords(curDecrypted,dict) > max){
    			max = countWords(curDecrypted,dict);
    			actualLanguage = l;
    			actualDecrpyted = curDecrypted;
    		}
    	}
    	System.out.println(actualDecrpyted);
    }
    
    
    
    
    
}
