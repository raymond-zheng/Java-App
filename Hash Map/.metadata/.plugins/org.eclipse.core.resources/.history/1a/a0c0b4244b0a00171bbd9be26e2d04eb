import edu.duke.*;
import java.util.*;

public class GladLibMap {
	private String[] label = {"adjective","noun","color",
			"country","name","animal","timeframe","verb","fruit"};
	private ArrayList<String> seen;
	private HashMap<String, ArrayList<String>> myMap;
	private Random myRandom;
	private static String dataSourceURL = "http://dukelearntoprogram.com/course3/data";
	private static String dataSourceDirectory = "data";
	
	public GladLibMap(){
		initializeFromSource(dataSourceDirectory);
		myRandom = new Random();
	}
	
	public GladLibMap(String source){
		initializeFromSource(source);
		myRandom = new Random();
	}
	
	private void initializeFromSource(String source) {
		//don't forget the initialization here......
		myMap = new HashMap<String, ArrayList<String>>();
		for(int i = 0 ; i < label.length; i ++){
			String curLabel = label[i];
			myMap.put(curLabel,readIt(source+ "/" + curLabel +".txt"));
		}
		seen = new ArrayList<String>();
	}
	
	private String randomFrom(ArrayList<String> source){
		int index = myRandom.nextInt(source.size());
		return source.get(index);
	}
	
	private String getSubstitute(String label) {
		if(myMap.containsKey(label)){
			return randomFrom(myMap.get(label));
		}else if(label.contains("number")){
			//cannot use label == "number" here, but use contains instead..
			return ""+myRandom.nextInt(50)+5;
		}
		return "**UNKNOWN**";
	}
	
    //taking each word of the template to process, if a word
	//contains < and contains > , then find an element from ArrayList to
	//replace the <XXXX > , else leave it unchanged
	private String processWord(String w){
		int first = w.indexOf("<");
		int last = w.indexOf(">",first);
		if (first == -1 || last == -1){
			//unchanged, since < and > are not both found 
			return w;
		}
		// The word is like prefix < XXXX > suffix , thus only
		//replacing the < XXXX > part
		String prefix = w.substring(0,first);
		String suffix = w.substring(last+1);
		//from first + 1 but not include the last , thus 
		//eliminating  the < and > in the result
		//w.substring(first + 1 , last) will be verb/fruit/....
		String sub = getSubstitute(w.substring(first+1,last));
		//keep looking for the sub that is unseen
		while(seen.indexOf(sub) != -1){
			sub = getSubstitute(w.substring(first+1,last));
		}
		//exit while loop, finally found a sub that is not seen and 
		//adding it to seen
		seen.add(sub);
		return prefix+sub+suffix;
	}
	
	private void printOut(String s, int lineWidth){
		int charsWritten = 0;
		for(String w : s.split("\\s+")){
			if (charsWritten + w.length() > lineWidth){
				System.out.println();
				charsWritten = 0;
			}
			System.out.print(w+" ");
			charsWritten += w.length() + 1;
		}
	}
	
	private String fromTemplate(String source){
		String story = "";
		if (source.startsWith("http")) {
			URLResource resource = new URLResource(source);
			for(String word : resource.words()){
				story = story + processWord(word) + " ";
			}
		}
		else {
			FileResource resource = new FileResource(source);
			for(String word : resource.words()){
				story = story + processWord(word) + " ";
			}
		}
		return story;
	}
	
	private ArrayList<String> readIt(String source){
		ArrayList<String> list = new ArrayList<String>();
		if (source.startsWith("http")) {
			URLResource resource = new URLResource(source);
			for(String line : resource.lines()){
				list.add(line);
			}
		}
		else {
			FileResource resource = new FileResource(source);
			for(String line : resource.lines()){
				list.add(line);
			}
		}
		return list;
	}
	
	public void makeStory(){
		seen.clear();
	    System.out.println("\n");
		String story = fromTemplate("data/madtemplate2.txt");
		printOut(story, 60);
		System.out.println("\nThere are total " + totalWordsInMap() + " words can be chozed");
	}
	
	public int totalWordsInMap(){
		//loop over the map by keys
		//loop over the map by index is not feasible??
		int total = 0;
		for(int i = 0 ; i < label.length ; i ++){
			total += myMap.get(label[i]).size();
		}
		return total;
	}
	
	
}
